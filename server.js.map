{"version":3,"sources":["../server/server.js"],"names":["app","PORT","process","env","use","json","urlencoded","extended","text","type","static","exphbs","require","hbs","create","defaultLayout","partialsDir","engine","set","databaseUri","MONGODB_URI","connect","db","connection","on","err","console","log","once","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAEA,IAAMC,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AAEA;AACAD,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAJ,IAAII,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAL,IAAII,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAP,IAAII,GAAJ,CAAQ,qBAAWI,IAAX,EAAR;AACAR,IAAII,GAAJ,CAAQ,qBAAWC,IAAX,CAAgB,EAAEI,MAAM,0BAAR,EAAhB,CAAR;;AAEA;AACAT,IAAII,GAAJ,CAAQ,8BAAe,SAAf,CAAR;;AAEA;AACAJ,IAAII,GAAJ,CAAQ,kBAAQM,MAAR,CAAe,UAAf,CAAR;;AAEA;AACA,IAAMC,SAASC,QAAQ,oBAAR,CAAf;AACA,IAAMC,MAAMF,OAAOG,MAAP,CAAc;AACxBC,iBAAe,MADS;AAExBC,eAAa,CACX,gBADW;AAFW,CAAd,CAAZ;;AAOAhB,IAAIiB,MAAJ,CAAW,YAAX,EAAyBJ,IAAII,MAA7B;AACAjB,IAAIkB,GAAJ,CAAQ,aAAR,EAAuB,YAAvB;;AAEA;;AAEA;AACA;AACA;AACA,IAAIC,cAAc,8BAAlB;;AAEA,IAAIjB,QAAQC,GAAR,CAAYiB,WAAhB,EAA6B;AAC3B,qBAASC,OAAT,CAAiBnB,QAAQC,GAAR,CAAYiB,WAA7B;AACD,CAFD,MAEO;AACL,qBAASC,OAAT,CAAiBF,WAAjB;AACD;;AAED,IAAMG,KAAK,mBAASC,UAApB;;AAEAD,GAAGE,EAAH,CAAM,OAAN,EAAe,UAACC,GAAD,EAAS;AACtBC,UAAQC,GAAR,CAAY,iBAAZ,EAA+BF,GAA/B;AACD,CAFD;;AAIAH,GAAGM,IAAH,CAAQ,MAAR,EAAgB,YAAM;AACpBF,UAAQC,GAAR,CAAY,iCAAZ;AACD,CAFD;;AAIA;AACA;AACA3B,IAAII,GAAJ,CAAQQ,QAAQ,gBAAR,CAAR;AACAZ,IAAII,GAAJ,CAAQQ,QAAQ,eAAR,CAAR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEI;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,IAAI6B,MAAJ,CAAW5B,IAAX,EAAiB,YAAK;AACpByB,UAAQC,GAAR,CAAY,4BAA4B1B,IAAxC;AACD,CAFD","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport logger from 'morgan';\nimport mongoose from 'mongoose';\nimport methodOverride from 'method-override';\n\nconst app = express();\n\nconst PORT = process.env.PORT || 3000;\n\n// Run Morgan for Logging\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.text());\napp.use(bodyParser.json({ type: 'application/vnd.api+json' }));\n\n// override with POST having ?_method=DELETE\napp.use(methodOverride(\"_method\"));\n\n// public Directory\napp.use(express.static('./public'));\n\n// handlebars\nconst exphbs = require('express-handlebars');\nconst hbs = exphbs.create({\n  defaultLayout: 'main',\n  partialsDir: [\n    'views/partials'\n  ]\n});\n\napp.engine('handlebars', hbs.engine);\napp.set('view engine', 'handlebars');\n\n// -------------------------------------------------\n\n// hook mongoose with our mongodb database\n//local uri\n// create mongoDB nytreact\nlet databaseUri = 'mongodb://localhost/nytreact';\n\nif (process.env.MONGODB_URI) {\n  mongoose.connect(process.env.MONGODB_URI);\n} else {\n  mongoose.connect(databaseUri);\n}\n\nconst db = mongoose.connection;\n\ndb.on('error', (err) => {\n  console.log('Mongoose Error:', err);\n});\n\ndb.once('open', () => {\n  console.log('Mongoose connection successful.');\n});\n\n// Routes\n// Main \"/\" Route. This will redirect the user to our rendered React application\napp.use(require('./routes/saved'));\napp.use(require('./routes/main'));\n\n// This is the route we will send GET requests to retrieve our most recent click data.\n// We will call this route the moment our page gets rendered\n// app.get('/api', (req,res) => {\n//   Click.find({}).exec((err, doc)=>{\n//     if (err) {\n//       console.log(err);\n//     } else {\n//       res.send(doc);\n//     }\n//   });\n// });\n\n// This is the route we will send POST requests to save each click.\n// We will call this route the moment the \"click\" or \"reset\" button is pressed.\n\n// app.post('/api', (req, res) => {\n//   let clickID = req.body.clickID;\n//   let clicks = parseInt(req.body.clicks);\n\n    // Note how this route utilizes the findOneAndUpdate function to update the clickCount\n    // { upsert: true } is an optional object we can pass into the findOneAndUpdate method\n    // If included, Mongoose will create a new document matching the description if one is not found\n//   Click.findOneAndUpdate({\n//     clickID: clickID\n//   }, {\n//     $set: {\n//       clicks: clicks\n//     }\n//   }, {upsert: true}).exec((err)=>{\n//     if (err) {\n//       console.log(err);\n//     }else {\n//       res.send('Updated Click Count!');\n//     }\n//   });\n// });\n\napp.listen(PORT, () =>{\n  console.log('App listening on PORT: ' + PORT);\n});"]}